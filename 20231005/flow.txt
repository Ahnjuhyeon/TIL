**2. 나는 hook함수의 종류와 기능, 어느 순간 사용 해야할지 정의할 수 있다**

(1) 각 훅함수의 장단점과 개념, 사용해야하는 순간을 한글로 정의해보세요
useState
- 초기 상태의 값이 있고 그 상태를 바꿀때! 리랜더링 된다!
- 내가 원하는 시점에 ui를 변경할때

useRef
- 랜더가 되어도 값이 유지가 된다! (원래라면 값이 초기화!)
- 태그에 접근이 가능하다!
- 랜더가 되어도 값이 유지되는걸 원할때 

useEffect
- 처음 화면이(컴포넌트) 열렸을때 실행
- 의존성 배열에 값을 넣으면 특정 값이 바뀌었을때 실행하고 싶은 함수를 실행!

useMemo
-> 어떤 조건이 만족됐을 때만
-> 의존성 배열에 값이 있으면 그 값 ( 함수만 ) 호출 될 때만 useMemo 함수가 변경 된다 ..

const 변수명 = (()=>{
    console.log()
},[호출시 변경된 함수])



useCallback
useMemo랑 차이가 뭐지.. 
값을 캐싱해두고 내가 원하는 특정 함수의 값이 바뀔때 쓰인다고..?
다들 그런것 같은데..

(2) 1번의 예시를 모두 코드로 직접 구현해보세요
내파일에 있다 useCallback 빼고...



**3. 나는 전역 상태 관리를 하는 방법의 종류와 어느 순간 전역 상태를 관리해야할지 단순 설명뿐이 아니라 판단할 수 있다.**

(1) 전역 상태로 전환 해야하는 순간은 언제이며, 전역 상태하지 않은 사례와 전역 상태 관리한 사례를 코드로 구현하여 비교해보세요.
    프롭스 드릴링이 일어날때 , 
    부모는 상태를 몰라도 되는 상태일 때,독립...

전역 상태하지 않은 사례

index.js
  <div>
        <AddTodo post={posts} setPost={setPosts} />
        {posts.map((post) => (
          <OnePost post={post} posts={posts} setPosts={setPosts} />
        ))}
      </div>


OnePost.js
const OnePost = ({ post, posts, setPosts }) => {
    ....
    return
    ...
}

전역 상태 관리한 사례

context 나 다른 라이브러리들을 사용하여 
context.js

  const { post, addPostShow, setAddPostShow } = usePost(); 

**4.  나는 CRUD를 활용한 상태 변경과 UI 변경 시점에 따른 리랜더링을 자유롭게 다룰 수 있다.**

(1) 아래 데이터를 주제로 CRUD를 진행해보세요
        
        const posts = [
            {
                id: 1,
                title: "",
                content: "",
            },
            {},
            {}
        ]